#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t reveal_title_slide:nil reveal_slide_number:nil reveal_progress:t reveal_history:t reveal_center:t
#+REVEAL_THEME: solarized

* ⚗️ELIXIR! ⚗️
λ conf 2017 workshop
* "Aldric!"
That's me.

Yell that when you're stuck.

Send flames to /dev/null.
* Getting in groups and group intros
Get in groups of four.
Prefer people you don't know.
- Your name
- How you like to receive help
- Your familiarity with functional programming
* Workshop structure
- 3x(25 minutes of work + 5-minute break)
- 15-minute break
- rinse and repeat
- also, food somewhere
* Getting familiar with codio
- log in
- set up Elixir VM
* SMALL BREAK
* The documentation
Teach a 👤 to 🐟 ...

https://hexdocs.pm/elixir/Kernel.html#content

This will likely come in handy.
* REPL work
** Entering the repl
=iex= on the command line.
#+BEGIN_SRC
$ iex
Erlang/OTP 19 [erts-8.3] [source] [64-bit] [smp:8:8]
  [async-threads:10] [hipe] [kernel-poll:false] [dtrace]

Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)>
#+END_SRC
** Data structures
- numbers
- strings (interpolation)
- ranges
- maps
- lists
- atoms
- tuples
** Console interface, gets and puts
- =IO.puts foo=
- =IO.inspect foo=
- =input = IO.gets("Your input ")=
** List comprehensions
The Enum module has most of the functions you care about:
- =Enum.member?=
- =Enum.map=
- =Enum.flat_map=
- =Enum.reduce=
** Anonymous functions
#+BEGIN_SRC elixir
foo = fn() -> 5 end
foo.()
sum = fn(x, y) -> x + y end
sum.(2, 3)
sum = &(&1 + &2)
sum.(2, 3)
#+END_SRC
** Modules, aka namespaces
#+BEGIN_SRC elixir
defmodule Foo do
  @static_number 100
end
#+END_SRC
** Named functions
Implicit return: last evaluated value is what is returned.
#+BEGIN_SRC elixir
defmodule Foo do
  def double_numbers(list) do
    Enum.map(list, fn(x) -> x * 2 end)
  end

  def bar do
    double_numbers([1,2,3])
  end
end

Foo.bar()
#+END_SRC
** REPL / mapping Exercises
*** Each
Take this data structure and create the following output:
#+BEGIN_SRC elixir
  beatles = ["john", "paul", "george", "ringo", "stu"]

  # output:
  #=> 'john fondly remembers doing amphetamines in Hamburg'
  #=> 'paul fondly remembers doing amphetamines in Hamburg'
  #=> 'george fondly remembers doing amphetamines in Hamburg'
  #=> 'ringo fondly remembers doing amphetamines in Hamburg'
  #=> 'stu fondly remembers doing amphetamines in Hamburg'
#+END_SRC
*** Map
Take this data structure and create the following output:
#+BEGIN_SRC elixir
beatles = ["john", "paul", "george", "ringo", "stu"]

# output:
#=> ["John", "Paul", "George", "Ringo", "Stu"]
#+END_SRC
*** Squares and Hash
Write code that:
- Prompts the user for a minimum and maximum number.
- Generates a Hash that has key-value pairs, or entries, where.
  - Each key in a pair is a integer between the min and max entered.
  - Each value in the pair is the square of key in that pair.
(hint: use =Enum.reduce/3=)
#+BEGIN_SRC elixir
# with a min and max of 2 and 4, respectively, the resulting hash would be:
a = %{2=>4, 3=>9, 4=>16}
#+END_SRC
* SMALL BREAK
* Recursion, pattern matching, guard clauses
** Pattern matching / destructuring
#+BEGIN_SRC elixir
a = 5
5 = a
^a = 6
{:ok, b} = {:ok, 6}
{:ok, ^a} = {:ok, 5}
{:ok, ^a} = {:ok, 6}
#+END_SRC
** Pattern matching in functions
#+BEGIN_SRC elixir
defmodule Foo do
  def bar(1) do
    IO.puts "hey hey"
  end
  def bar(2) do
    IO.puts "yah yah"
  end
  def bar(x) do
    IO.puts "default"
  end
end
#+END_SRC
What happens if the last function is not defined??
** Pattern matching, anonymous function
#+BEGIN_SRC elixir
function = fn
   1 -> IO.puts "That was a one"
   2 -> IO.puts "That was a two"
   _ -> IO.puts "I don't care what that was."
end
#+END_SRC
** Recursion
Just pattern matching. Function definition order may matters (more specific ones go to the top).
#+BEGIN_SRC elixir
defmodule Foo do
  def recurse([], acc) do
    IO.puts acc
  end

  def recurse([head | tail], acc) do
    recurse(tail, acc + head)
  end

  def recurse(list) do
    recurse(list, 0)
  end
end
#+END_SRC
** Guard clauses on functions
I refer to this page a /lot/.
http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses
- =def(x) when x > 5=
- =def(x) when x < 0=
- =def(x)=
** Fibonacci
Write recursive code that computes a Fibonacci number, e.g. =Fibonacci.call(15)=.
The Fibonacci series is defined as:

- n(x) where x < 1 = undefined
- n(1) = 1
- n(2) = 1
- n(x) = n(x-1) + n(x+2)
** Fizzbuzz exercise
Write a program that prints the numbers from 1 to 100. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz".
* SMALL BREAK
* Combining functions
** Pipelining
#+BEGIN_SRC elixir
(1..100)
|> Enum.filter(fn(x) -> rem(x, 2) == 0 end) # Modulo operator!
|> Enum.map(fn(x) -> x * 2 end)
#+END_SRC
** Pipeline exercises
Write a pipeline that:
- removes odd numbers from a list
- squares the remaining numbers
- divides them by two
- removes the even numbers.

Note that =5/2= may yield a floating-point number so you might want to use =div(5, 2)= instead.

* Guess the number
Write a module that lets you play a game of guessing a number. To let the computer choose a random number, use something like =Enum.random(1..10)=.
You might want to use the pipelines to transform the user's input into an integer.
* LONG BREAK
* Rock, paper, scissors
** Basic game
Write a module that lets you determine the winner of a two-player game of rock, paper, scissors. The inputs could be =:rock=, =:paper=, =:scissors=. The outputs could be =:player1=, =:player2=, =:draw=.

Remember that:
- rock beats scissors
- scissors beats paper
- paper beats rock
** Rock, paper, scissors, lizard, spock
Copy the previous code over to a new file and tweak the rules so that:
- Spock smashes scissors and vaporizes rock; he is poisoned by lizard and disproven by paper.
- Lizard poisons Spock and eats paper; it is crushed by rock and decapitated by scissors.
* SMALL BREAK
* Processes!
Now things get exciting.
** What is =self()= anyway?
In Elixir, =self()= refers to THE CURRENT PROCESS.
** Two simple tools
- =send=
- =receive=
** Message order
Messages are fundamentally FIFO, *HOWEVER*!

THE FIRST MESSAGE TO MATCH A PATTERN WILL BE THE FIRST TO GO.
** Example
#+BEGIN_SRC elixir
iex(12)> send self(), :hello
:hello
iex(13)> receive do :hello -> :world end
:world
#+END_SRC
** We can send any message to any process.
How to keep track of the sender? How about send the sender's pid?
https://hexdocs.pm/elixir/Kernel.html#spawn/1
#+BEGIN_SRC elixir
iex(8)> pid_of_repl = self()
#PID<0.80.0>
iex(9)> velociraptors = fn -> send(pid_of_repl, {self(), "Velociraptors!"}) end
#Function<20.118419387/0 in :erl_eval.expr/5>
iex(10)> child_pid = spawn(velociraptors)
#PID<0.98.0>
iex(11)> receive do
...(11)>   {^child_pid, message} -> IO.puts message
...(11)> end
Velociraptors!
:ok
#+END_SRC
* Exercise: distributed map
How would you build code that does distributed mapping?
** From "Programming Elixir"
Courtesy of Dave Thomas - excerpt from Programming Elixir, used with permission.
#+BEGIN_SRC elixir
defmodule Parallel do
  def pmap(collection, fun) do
    me = self()
    collection
    |> Enum.map(fn (elem) ->
         spawn fn -> send(me, { self(), fun.(elem) }) end
       end)
    |> Enum.map(fn (pid) ->
         receive do { ^pid, result } -> result end
       end)
  end
end
#+END_SRC
* SMALL BREAK
* GenServers
** Cast and Call
#+BEGIN_SRC elixir
defmodule MyServer do
  use GenServer

  def handle_cast({:ping, x}, state) do
    :timer.sleep 2000
    IO.inspect x
    {:noreply, state}
  end

  def handle_call({:ping, x}, _from, state) do
    :timer.sleep 2000
    IO.inspect x
    {:reply, :hello_world, state}
  end
end

{:ok, pid} = GenServer.start_link(MyServer, nil) # nil means store nil as state
GenServer.cast(pid, {:ping, "hello, world"})
GenServer.call(pid, {:ping, "hello, world"})
#+END_SRC

** State
#+BEGIN_SRC elixir
defmodule MyServer do
  use GenServer

  def handle_call({:add_name, name}, _from, state) do
    {:reply, :ok, [name | state]}
  end

  def handle_call(:greetings, _from, state) do
    greetings = Enum.map(state, fn(x) -> "Hello, #{x}!" end)
    {:reply, {:ok, greetings}, state}
  end
end

{:ok, pid} = GenServer.start_link(MyServer, []) # store [] as initial state
:ok = GenServer.call(pid, {:add_name, "Kathew"})
:ok = GenServer.call(pid, {:add_name, "Lichard"})
{:ok, greetings} = GenServer.call(pid, :greetings)
#+END_SRC
** Relevant documentation
https://hexdocs.pm/elixir/GenServer.html#c:handle_call/3

https://hexdocs.pm/elixir/GenServer.html#c:handle_cast/2
* OPTIONAL SMALL BREAK
* GenServers part 2
* Rock-paper-scissors ... As a Service
Create a GenServer that lets you play RPS and keeps track of the number of wins for each player as well as a percentage of time each player chose.
* Rock Paper Scissors, many processes
Make it possible to change between rulesets, and preserve stats for each rulesets while the game is running (don't worry about storing anything).
Maybe each ruleset/stats is a separate process and you can store the pid as part of the state of the game process?
Maybe you store all the pids in the game state and you send a message to switch to another ruleset.
* SMALL BREAK
* RPS, many processes, part 2
* LONG BREAK
* Supervisors & Applications
** A supervisor is a process guardian
Gets notified and acts appropriately if a supervised process goes down.
** Won't show supervisors outside an application for simplicity
- Supervisors manage processes
- Supervising processes in REPL is useless
** An application is a reusable unit of code
Think "microservice" if you have to.
* Creating a project
=mix new foo --sup=
** App not always a process tree
In this case, for didactic purposes
** directory tree
#+BEGIN_QUOTE
foo
├── config
│   └── config.exs
├── lib
│   ├── foo
│   │   └── application.ex
│   └── foo.ex
├── mix.exs
├── README.md
└── test
    ├── foo_test.exs
    └── test_helper.exs
#+END_QUOTE
** What to supervise?
In general, things that you want to have come back up if they crash.
** application.ex
Shows that the Application is also behaving as a Supervisor
** Important code
#+BEGIN_SRC elixir
  def start(_type, _args) do
    import Supervisor.Spec, warn: false
    children = [
      # Foo.Worker is a made-up module name
      worker(Foo.Worker, [arg1, arg2, arg3], restart: :permanent),
    ]
    opts = [strategy: :one_for_one, name: Foo.Supervisor]
    Supervisor.start_link(children, opts)
  end
#+END_SRC
** Connecting the dots
#+BEGIN_SRC elixir
defmodule Foo.Worker do
  use GenServer
  def start_link(args) do
    GenServer.start_link(Foo.Worker, args, name: Foo.Worker)
  end
end

iex(14)> Foo.Worker.start_link(nil)
{:ok, #PID<0.114.0>}
iex(15)> GenServer.whereis(Foo.Worker)
#PID<0.114.0>
#+END_SRC
** Exercise
Put the RPS game in a project with a supervision tree (=--sup=). You can test it with =iex -S mix= to start a REPL with the project. Try to make it crash. See if you get error messages
* SMALL BREAK
* Deploying
https://hexdocs.pm/distillery/walkthrough.html#content
** Add distillery to RPS project
In mix.exs file, replace the =deps= function with
#+BEGIN_SRC elixir
defp deps do
  [{:distillery, "~> 1.0"}]
end
#+END_SRC
then run =mix deps.get && mix release.init=
** Build the release
#+BEGIN_SRC bash
MIX_ENV=prod mix release --env=prod
#+END_SRC
Now you have a tarball:
#+BEGIN_QUOTE
_build/prod/rel/project_name/releases/0.1.0/project_name.tar.gz
#+END_QUOTE
** Place that tarball somewhere and untar
Ye olde
#+BEGIN_SRC bash
tar xzf project_name.tar.gz -C /deploy/path
#+END_SRC
** Start the app
#+BEGIN_SRC bash
/deploy/path/bin/project_name start
#+END_SRC
** Connect to it
#+BEGIN_SRC bash
/deploy/path/bin/project_name remote_console
#+END_SRC
** Build upgrade
0. Open a new terminal
1. change version number in mix.exs
2. MIX_ENV=prod mix release --upgrade --env=prod
3. _build/prod/rel/project_name/releases/new_version_number/project_name.tar.gz
3. Create directory /deploy/path/releases/new_version_number
4. Put the new tarball in there
5. /deploy/path/bin/project_name upgrade new_version_number
6. Champagne!
* Parting thoughts
Good time for questions!
If you don't have questions, check out this blog entry: distributed game of life, because why not?
http://beyondscheme.com/2016/distributed-game-of-life-in-elixir

* Bonus material
* Railway programming
This is how you would implement railway programming.
#+BEGIN_SRC elixir
  with {:ok, new_deck1, hand1} <- Deck.deal(original_deck, 5),
       {:ok, new_deck2, hand2} <- Deck.deal(new_deck1, 5),
       {:ok, hand1_rank} <- Poker.rank(hand1),
       {:ok, hand2_rank} <- Poker.rank(hand2) do
    if hand1_rank > hand2_rank do
      {:ok, :player_1_wins}
    else
      {:ok, :player_2_wins}
    end
  else
    {:error, :not_enough_cards_in_deck} -> {:error, :not_enough_cards, original_deck}
    {:error, _} -> {:error, :could_not_compare_hands, original_deck}
  end
#+END_SRC

* anonymous recursion
#+BEGIN_SRC elixir
factorial = fn
  (0,_) -> 1
  (1,_) -> 1
  (n, fun) -> n * fun.(n - 1, fun)
end
factorial.(6, factorial) # 720
#+END_SRC
* Code samples
** Map of squares
#+BEGIN_SRC elixir
defmodule SquaresMap do
  def generate do
    min = String.to_integer String.trim(IO.gets("Minimum: "))
    max = String.to_integer String.trim(IO.gets("Maximum: "))
    generate_hash(min, max)
  end

  def generate_hash(min, max) do
    Enum.reduce(min..max, %{}, fn(x, acc) -> Map.put(acc, x, x * x) end)
  end

end
#+END_SRC
** Fizzbuzz
#+BEGIN_SRC elixir
defmodule FizzBuzz do
  def call do
    Enum.each(1..100, fn
      x when rem(x, 3) == 0 and rem(x, 5) == 0 -> IO.puts "FizzBuzz"
      x when rem(x, 3) == 0 -> IO.puts "Fizz"
      x when rem(x, 5) == 0 -> IO.puts "Buzz"
      x -> IO.puts x
    end
    )
  end
end
#+END_SRC
** Guess the number
#+BEGIN_SRC elixir
defmodule Guess do
  def start do
    number = Enum.random(1..10)
    loop_guessing(number)
  end

  def loop_guessing(number) do
    guess =
      IO.gets("Your guess: ")
      |> String.trim
      |> String.to_integer
    evaluate_guess(guess, number)
  end

  def evaluate_guess(guess, number) when guess < number do
    IO.puts "You guessed too low!"
    loop_guessing(number)
  end

  def evaluate_guess(guess, number) when guess > number do
    IO.puts "You guessed too high!"
    loop_guessing(number)
  end

  def evaluate_guess(guess, number) when guess == number do
    IO.puts "You guessed right!"
  end
end
#+END_SRC
